package com.lxy.leetcode.string;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

public class FractionToDecimalTest {
    public static Stream<Arguments> arguments() {
        return Stream.of(
                Arguments.of(3, 8, "0.375"),
                Arguments.of(16, 4, "4"),
                Arguments.of(1, 3, "0.(3)"),
                Arguments.of(1, 7, "0.(142857)"),
                Arguments.of(1, 14, "0.0(714285)"),
                Arguments.of(1, 124, "0.00(806451612903225)"),
                Arguments.of(456, 13, "35.(076923)"),
                Arguments.of(1, 6, "0.1(6)"),
                Arguments.of(2, 24, "0.08(3)"),
                Arguments.of(7, 120, "0.058(3)"),
                Arguments.of(14400, 12, "1200"),
                Arguments.of(1, 2, "0.5"),
                Arguments.of(4, 333, "0.(012)"),
                Arguments.of(-50, 8, "-6.25"),
                Arguments.of(-50, -8, "6.25"),
                Arguments.of(0, -5, "0"),
                Arguments.of(0, +5, "0"),
                Arguments.of(-2147483648, 1, "-2147483648"),
                Arguments.of(1, 2147483, "0.(000000465661427820383211415410506160002197921939312208757880737589075210374191553553625337197081420434992966184132773111591570224304453166800389106689086712211458717018947297836583572489281638085144329431245788674462149409331761881234915480122543461345212045916079428801066178405137549400856723894903941032362072249233172043736783946601672748981016380572046437620227959895375190397316300059185567475970706170898675332936279355878486581733126641747571459238559746456665780357749048537287606002003275462483288575509095997500329455460182921122076402933108201555029772063387696200621844270711339740524139189926066935104957757523575273936976451035933695400615511275292982528848889607042290905213219382877536166758945239613072606395487181970707102221530973702702186699498901737522485626195876754321221634816201106132155644538280396166116332469220943774642220683469904069089254722854616311281625977947206101282291873788989249274615910812798052417644284029256576187099036406807411281020618091039603107451840130981246417317389706926667172685418231483089738079416693869055075174052600183563734846795061939954821528272866420828476872692356586757613447929506310410839107923089495935474227269785139160589396982420815438352713385856837981953757026248869024807181244275274821733163894661797089895472979297158580533582803682264306632462282588500118510833380287527305221973817720559371133554957128880647716419641040231750379397648316657221500705709893861790756900054622085483330950699027652372568257816243481322087299410519198522176892669231840252053217650617024674933398774285989691187310912356465685642214629871342404107506322518036231253052992736147387429842285131011514410125714615668668855585818374348015793372985956116998365062726922634544720493712872232283096071074835051080730324756936376213455473221441101047132852739695727509833605201996942467064931363833846414616553425568444546476037295755076990132168683058259366896035963963393423836184034984211749289749907216960506788645125479456647619562064053592042404992263035376764332942332954440151563481526978327651487811544957515379632807337706515022470492199472591866850633974750906060723181510633611534992360824276606613416730190646445163943090585583215326966499851221173811387563952776343281879297763940389749301857104340290470285445798639616704765532486171019747304169578990846493313334727213207275680412836795448438939912446338341211548589674516631796386746716970518509343263718502078945444504100847364100204751329812622498059355999558552966426276715578190840160317916370001532026097529060765556700565266407231163180337166813427626668057442131090211191427359378397873231126858745796823537136266037961650918773280161007095283175699178992336609882359953489736589300124843828798644738980471556701496589262871929603167987825747631063901320755507726952902537528818621614233965996471217699977136023894019184319503344147543892082032779770549988055784376407170627194720516995943623302256641845360359080840220853901986651349510100894861565842430417376994369687676223746590776271570019413424925831776083908464001810491631365649925983116047950088545520500045867650640307746324417934856760216495311022252562651252652523908221857868025032095713912519912846807169137078151491769667093988636929838327008875041152828683626366308836903481890194241351386716448977710184434521716819178545301639174792070530942503386522733823736905018572906048615984387303648038191687664116549467446308073218740264765774630113486346574105592454049694456254135655555829778396383114557833519520294223516554030928300712974212135788734998135025981579365238281280922829191197322633054603924687645955753782451362828017730524525688911157853170432548243688075761251660665066964441627710207717593107838339116072164482792180427039468996960627860616358779091615626293665654163502109213437312425756106101887651729955487424114649568820800909716165389900641821145964834180293860300640331029395808954017330987020619022362458748218262961802258737321785550805291590201179706661240158827799800976305749568215441053549667215060608163137961976881772754429255086070530011180530881967400906084006252901652772105762886132276716509513695801084339200822544346101924904644181118081027882409313601085549920534877342451604971960197123795624924621056371575467652130424315349644211386073836207318055602768450320677742268506898541222445067085513598943507352561114569940716643624187013354704088460770120182557906162703034203297534834967261673317087958321439564364421045475098056655163277194743800067334642462827412370668359190736317819512424545386389554655380275420108098643854223758697973394899982910225598991936141054434423927919336264827241938585776930480939779267169984581950124867111870035758141042327226804589372768026568778425719784510517661839465085404634169397382889643363882275203109873279555647239116677524338958678601879502654968630717914879884963000871252531451936988558233057025364112311948453142585994860029159718610112396698833005895739337633871839730512418491787827889673631875083528018615281238547639259542450394252247864127445944857305040365860870609918681544859726479790526863309278816176891737908984611286794819796012354929002930407365273671549437178315264893831522764091729713343481648050298884787446512964246981233378797410736196747541191245751421547923778674848648394422679946709706200235345285620421675049348469813265110829748128390306232924777518611323116411166002245419404949887845445109460703530598379591363470630500916654520664424351671235581375964326609337536082939888231944094551621596073170311476272454776126283653933465363870168005986543316058846565956517467192988256484451797755791314762445150904570606612485407335005678741112269573263210931122621226803658049912385802355594898772190513265995586460987118407922204739222615499168095859198885392806369130745156073412455418739054046062297117136666506789576448335097414042392885065912046800836141659794280094417511104860899946588634229002045650652414943447747898353560889655471079398533073370080228807399173823494761076106306778679970924100446895272279221767995369462761754109345685157926744938143864235479396111633945414236108039039191462749646912222355194429944264983704178333425689516517709336930723083721733769254517963588070313012955166583390881324788135691877421148386273604959853)"),
                Arguments.of(-1, -2147483648, "0.0000000004656612873077392578125")
        );
    }

    @ParameterizedTest
    @MethodSource("arguments")
    public void fractionToDecimalTest(int numerator, int denominator, String expected) {
        Assertions.assertEquals(expected, FractionToDecimal.fractionToDecimal(numerator, denominator));
    }
}
